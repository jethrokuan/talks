#+EXPORT_EXCLUDE_TAGS:  noexport
#+AUTHOR:               Jethro Kuan
#+TITLE:                GTD with Org-mode
#+EMAIL:                jethrokuan95@gmail.com
#+LANGUAGE:             en
#+OPTIONS:              toc:nil timestamp:nil
#+OPTIONS:              reveal_center:t reveal_progress:t reveal_history:t reveal_control:nil
#+OPTIONS:              reveal_mathjax:nil reveal_rolling_links:nil reveal_keyboard:t reveal_overview:t num:nil
#+REVEAL_HLEVEL:        1
#+REVEAL_MARGIN:        0.0
#+REVEAL_MIN_SCALE:     1.0
#+REVEAL_MAX_SCALE:     1.4
#+REVEAL_ROOT:          ../reveal.js
#+REVEAL_THEME:         metropolis
#+REVEAL_TRANS:         fade
#+REVEAL_SPEED:         fast
#+REVEAL_PLUGINS:       (markdown notes)

* Why GTD?
** Your Brain is a Computer
- Already limited RAM
- Much of it is spent keeping track of "open loops"
- Inability give your 100% to the task at hand

** The Solution
- Having an off-mind system you can trust
- Having a workflow to keep you in control

** The GTD Workflow
1. Capture
2. Clarify
3. Organize
4. Reflect
5. Engage

*** Step 1: Capture
Everything in mind goes into the inbox
- Todos
- Projects
- Errands
- Things to handle/finish
- etc. etc.

*** Step 2: Clarify
- Is it actionable?
- Should I delegate this to someone else?
- What should my next action be?

*** Step 3: Organize
Put items where they belong.
- Next Actions file
- Delegations file
- etc. etc.
*** Step 4: Reflect
Review lists as frequently as needed

*** Step 5: Just Do It!
[[file:doit.gif]]

*** [[http://www.gaglianoco.com/wp-content/uploads/2013/06/allen-gtd-basic-flow-chart.jpg][Info-graphic]]

* Why Emacs and org-mode?
- Emacs is great!
- Org-mode is great!
  - Org capture/refile
  - Deadlines/scheduling
  - Agenda
  - Tags
  - Plain text
- [[http://orgmode.org/worg/org-gtd-etc.html][Tons]] of tutorials for Org with GTD

** Why create my own mode?
- The GTD tutorials presented require a lot of manual work.
- The workflow follows a binary decision tree, and can be automated.
- Because I can.

* Demo
* Emacs Lisp Basics
** It's already there for you
=C-h i= gives you access to:
- Emacs Lisp Reference
- Emacs Lisp Tutorial
** Emacs Lisp is a Lisp
This means there are tons of parentheses.

#+begin_src emacs-lisp :tangle no
(+ 2 (+ 1 3))
#+end_src

These are your friends.
** Variables
#+begin_src emacs-lisp :tangle no
(setq variable-name "Variable")
#+end_src
** Functions
Functions are created with =defun=. Evaluate with =C-M-x=.
#+BEGIN_SRC emacs-lisp
  (defun hello (name) (insert "Hello " name))
#+END_SRC
** Lisp is list processing
#+BEGIN_SRC emacs-lisp
;; Let's store a list of names:
(setq list-of-names '("Sarah" "Chloe" "Mathilde"))

;; Get the first element of this list with `car':
(car list-of-names)

;; Get a list of all but the first element with `cdr':
(cdr list-of-names)
#+END_SRC
* GTD-mode Specifics
** Creating a minor mode
#+BEGIN_SRC emacs-lisp
(define-minor-mode gtd-mode
  "GTD mode"
  :lighter " gtd"
  :global t)
#+END_SRC
** =defcustom= and =defgroup=
#+BEGIN_SRC emacs-lisp
  (defgroup gtd nil
    "Provides an Emacs implementation of the GTD workflow."
    :group 'extensions)

  (defcustom gtd-folder "~/.org/gtd"
    "Folder that contains all GTD-related files. Defaults to \"~/.org/gtd\"."
    :group 'gtd)
#+END_SRC
** Step 1: Capture
No need to reinvent the wheel here. Use =org-capture=.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-capture-templates '("i" "Inbox" entry (file gtd-inbox-file)
                                        "* %?%i\n"))
#+END_SRC
** Step 2: Clarify
#+BEGIN_SRC emacs-lisp
  (defun gtd-clear-inbox ()                                                          ;; Define a function `gtd-clear-inbox`
    (interactive)                                                                    ;; Make it invokable with M-x
    (save-window-excursion                                                           ;; let's return here after this function ends
      (find-file gtd-inbox-file)                                                     ;;   open my inbox file
      (beginning-of-buffer)                                                          ;;   go to the start of the file
      (catch 'premature-end                                                          ;;   stop when exception is thrown
        (while (equal ?* (char-after 1))                                             ;;   loop while it's a headline
          (let ((title (org-element-property :raw-value (org-element-at-point))))    ;;     create a local var title containing the title
            (if (y-or-n-p (concat "\"" title "\". Is this actionable?"))             ;;     Ask: is it an actionable?
                (gtd-select-options gtd-actionable-options)                          ;;       yes: present actionable options            
              (gtd-select-options gtd-nonactionable-options))))                      ;;        no: present nonactionable options 
        (message "Inbox clear!"))                                                    ;;   print message clear
      (save-buffer)))
#+END_SRC
** Step 3: Organize (Part 1)
The list of =(key, string, function)=.

#+BEGIN_SRC emacs-lisp
  (defvar gtd-actionable-options
    '((?p "(p) Project" gtd-refile-to-project) 
      (?d "(d) Delegate" gtd-delegate-item)
      (?n "(n) Create Next-action" gtd-new-next-action)
      (?c "(c) Calendar" gtd-add-to-cal)
      (?\ "(SPC) DO NOW" gtd-do-now))
    "Options for actionables")

  (defvar gtd-nonactionable-options
    '((?t "(t) Trash" gtd-trash-item)
      (?i "(i) Incubate" gtd-incubate-item)
      (?r "(r) Reference" gtd-reference-item))
    "Options for nonactionables")
#+END_SRC
** Step 3: Organize (Part 2)
#+BEGIN_SRC emacs-lisp
  (defun gtd-select-options (options-var)
    (let ((options (mapconcat (lambda (x) (car (cdr x))) options-var " ")))
      (let ((opt (read-char options)))
        (or (assoc opt options-var)
            (progn
                                          ;TODO: Message that option is incorrect
              (gtd-select-options options-var)))
        (dolist (action options-var)
          (when (equal opt (nth 0 action))
            (funcall (nth 2 action)))))))
#+END_SRC
** Step 3: Organize (Part 3)
Modify the inbox headline, then copy it to the correct place.
#+BEGIN_SRC emacs-lisp
  (defun gtd-refile-to-project () 
    (gtd-alter-headline "Enter new actionable: ")
    (gtd-refile-to gtd-projects-file "Project: "))
#+END_SRC
* Demo
* Further extensions
1. tags for context
2. deadline/schedule for agenda
* Lessons Learnt
** Emacs Lisp
1. Emacs Lisp is scary
2. +Emacs+ Lisp is powerful
3. Emacs Lisp is satisfying
** Writing Emacs Lisp
1. =C-h f= is your friend
2. namespace your functions, and use =nameless-mode=
3. Quality-of-life libraries
   - dash
   - cl-lib
   - s
* Thank you!
[[https://github.com/jethrokuan/gtd-mode][Github]]

